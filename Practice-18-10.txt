#COMMIT AND ROLLBACK

-- create a table
CREATE TABLE STUDENTS (
  ID INTEGER PRIMARY KEY,
  NAME TEXT NOT NULL,
  GENDER TEXT NOT NULL
);
-- insert some values
INSERT INTO STUDENTS VALUES (1, 'RYAN', 'M');
INSERT INTO STUDENTS VALUES (2, 'PREETHI', 'F');
SELECT * FROM STUDENTS;
-- fetch some values
-- SELECT * FROM STUDENTS WHERE GENDER = 'F';

UPDATE STUDENTS SET NAME = "MANYA" WHERE ID = 1;
SELECT * FROM STUDENTS;

UPDATE STUDENTS SET GENDER = "F" WHERE ID = 1;
SELECT * FROM STUDENTS;
ROLLBACK;
COMMIT;


#JOINTS

CREATE TABLE TEACHER(
ID INT, 
TEACHERNAME VARCHAR(20), 
TEACHERCONTACT INT
);

CREATE TABLE COURSE(
COURSEID INT, 
COURSETITLE VARCHAR(20), 
TEACHERID INT REFERENCES TEACHER(ID), 
COURSEPRICE INT
);

INSERT INTO TEACHER VALUES(1, 'PREETHI', 123456789),(2, 'PRIYA', 34567876),(3, 'SEEMA', 98765432);
INSERT INTO COURSE VALUES(001, 'JAVA', 1, 2999), (002, 'PYTHON', 2, 3999), (003, 'PHP', 3, 2899),(004, 'PYTHON', 5, 15999);
-- SELECT * FROM TEACHER;

-- SELECT * FROM COURSE;
-- INNER JOIN
-- SELECT * FROM TEACHER JOIN COURSE ON COURSE.TEACHERID = TEACHER.ID;

-- LEFT JOIN
-- SELECT * FROM TEACHER LEFT JOIN COURSE ON COURSE.COURSEID = TEACHER.ID;

-- RIGHT JOIN
SELECT * FROM COURSE RIGHT JOIN TEACHER ON COURSE.TEACHERID = TEACHER.ID;

-- CROSS JOIN
-- SELECT * FROM TEACHER CROSS JOIN COURSE


#GROUP BY, HAVING CLAUSE AND SUBQUERIES

CREATE TABLE TEACHER(
ID INT, 
TEACHERNAME VARCHAR(20), 
TEACHERCONTACT INT
);

CREATE TABLE COURSE(
COURSEID INT, 
COURSETITLE VARCHAR(20), 
TEACHERID INT REFERENCES TEACHER(ID), 
COURSEPRICE INT
);

INSERT INTO TEACHER VALUES(1, 'PREETHI', 123456789),(2, 'PRIYA', 34567876),(3, 'SEEMA', 98765432);
INSERT INTO COURSE VALUES(001, 'JAVA', 1, 2999), (002, 'PYTHON', 2, 3999), (003, 'PHP', 3, 2899),(004, 'PYTHON', 2, 1999);
SELECT * FROM TEACHER;

SELECT * FROM COURSE;
GROUP BY CLUASE
SELECT * FROM COURSE GROUP BY TEACHERID;

HAVING CLUASE
SELECT * FROM COURSE GROUP BY TEACHERID HAVING COUNT(TEACHERID) > 1;

SUBQUERIES
SELECT DISTINCT COURSETITLE FROM COURSE WHERE TEACHERID = (SELECT ID FROM TEACHER WHERE TEACHERNAME = 'PREETHI');

SELECT SUM(COURSEPRICE) AS 'FEE' FROM COURSE WHERE COURSETITLE = 'PYTHON' AND TEACHERID=(SELECT ID FROM TEACHER WHERE TEACHERNAME='PRIYA');


#STRING FUNCTION 
-- SELECT UCASE(TEACHERNAME) FROM TEACHER WHERE ID = 2;
-- SELECT LCASE(TEACHERNAME) FROM TEACHER WHERE ID = 2;

#NUMERIC FUNCTION
SELECT 23 / 3;
SELECT 23 * 3;
SELECT 23 + 3;
SELECT 23 - 3;
SELECT 23 % 3;

